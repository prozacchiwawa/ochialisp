// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Clvm = require("./clvm.js");
var List = require("bs-platform/lib/js/list.js");
var Sexp = require("./sexp.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Process = require("process");
var Runtypes = require("./runtypes.js");

function usage(param) {
  return Printf.printf(/* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "Usage: clvmrun [file] '[arg-atom-or-list]'\n",
                _1: /* End_of_format */0
              },
              _1: "Usage: clvmrun [file] '[arg-atom-or-list]'\n"
            });
}

function main(args) {
  if (!args) {
    return Printf.printf(/* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "Usage: clvmrun [file] '[arg-atom-or-list]'\n",
                  _1: /* End_of_format */0
                },
                _1: "Usage: clvmrun [file] '[arg-atom-or-list]'\n"
              });
  }
  var match = args.tl;
  if (!match) {
    return Printf.printf(/* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "Usage: clvmrun [file] '[arg-atom-or-list]'\n",
                  _1: /* End_of_format */0
                },
                _1: "Usage: clvmrun [file] '[arg-atom-or-list]'\n"
              });
  }
  if (match.tl) {
    return Printf.printf(/* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "Usage: clvmrun [file] '[arg-atom-or-list]'\n",
                  _1: /* End_of_format */0
                },
                _1: "Usage: clvmrun [file] '[arg-atom-or-list]'\n"
              });
  }
  var infile = args.hd;
  var incode = Fs.readFileSync(infile, "utf8");
  return Curry._1(Printf.printf(/* Format */{
                  _0: {
                    TAG: /* String */2,
                    _0: /* No_padding */0,
                    _1: /* End_of_format */0
                  },
                  _1: "%s"
                }), Runtypes.run_to_string(Sexp.to_string, Clvm.parse_and_run(infile, incode, match.hd)));
}

var argv = Process.argv;

var real_args = $$Array.to_list($$Array.sub(argv, 2, argv.length - 2 | 0));

var want_help = real_args === /* [] */0 || List.filter(function (param) {
        return "-h" === param;
      })(real_args) !== /* [] */0 || List.filter(function (param) {
        return "--help" === param;
      })(real_args) !== /* [] */0;

if (want_help) {
  Printf.printf(/* Format */{
        _0: {
          TAG: /* String_literal */11,
          _0: "Usage: clvmrun [file] '[arg-atom-or-list]'\n",
          _1: /* End_of_format */0
        },
        _1: "Usage: clvmrun [file] '[arg-atom-or-list]'\n"
      });
} else {
  main(real_args);
}

exports.usage = usage;
exports.main = main;
/* argv Not a pure module */

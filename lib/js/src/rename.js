// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Gensym = require("./gensym.js");
var Comptypes = require("./comptypes.js");

function rename_in_qq(namemap, any) {
  if (any.TAG !== /* Cons */1) {
    return any;
  }
  var match = any._0;
  var x = match[1];
  if (x.TAG === /* Atom */4 && x._0[1] === "unquote") {
    var match$1 = match[2];
    if (match$1.TAG === /* Cons */1) {
      var match$2 = match$1._0;
      if (match$2[2].TAG === /* Nil */0) {
        return rename_in_cons(namemap, match$2[1]);
      }
      
    }
    
  }
  return {
          TAG: /* Cons */1,
          _0: [
            match[0],
            rename_in_qq(namemap, x),
            rename_in_qq(namemap, match[2])
          ]
        };
}

function rename_in_cons(namemap, any) {
  switch (any.TAG | 0) {
    case /* Cons */1 :
        var match = any._0;
        var head = match[1];
        var l = match[0];
        if (head.TAG === /* Atom */4) {
          var match$1 = head._0;
          var la = match$1[0];
          switch (match$1[1]) {
            case "q" :
                return {
                        TAG: /* Cons */1,
                        _0: [
                          l,
                          {
                            TAG: /* Atom */4,
                            _0: [
                              la,
                              "q"
                            ]
                          },
                          match[2]
                        ]
                      };
            case "qq" :
                var match$2 = match[2];
                if (match$2.TAG === /* Cons */1) {
                  return rename_in_qq(namemap, match$2._0[1]);
                }
                break;
            case "quote" :
                var match$3 = match[2];
                if (match$3.TAG === /* Cons */1) {
                  var match$4 = match$3._0;
                  var lc = match$4[2];
                  if (lc.TAG === /* Nil */0) {
                    return {
                            TAG: /* Cons */1,
                            _0: [
                              l,
                              {
                                TAG: /* Atom */4,
                                _0: [
                                  la,
                                  "quote"
                                ]
                              },
                              {
                                TAG: /* Cons */1,
                                _0: [
                                  match$4[0],
                                  match$4[1],
                                  {
                                    TAG: /* Nil */0,
                                    _0: lc._0
                                  }
                                ]
                              }
                            ]
                          };
                  }
                  
                }
                break;
            default:
              
          }
        }
        return {
                TAG: /* Cons */1,
                _0: [
                  l,
                  rename_in_cons(namemap, head),
                  rename_in_cons(namemap, match[2])
                ]
              };
    case /* Atom */4 :
        var match$5 = any._0;
        var name = match$5[1];
        var l$1 = match$5[0];
        try {
          return {
                  TAG: /* Atom */4,
                  _0: [
                    l$1,
                    Curry._2(Comptypes.StringMap.find, name, namemap)
                  ]
                };
        }
        catch (exn){
          return {
                  TAG: /* Atom */4,
                  _0: [
                    l$1,
                    name
                  ]
                };
        }
    default:
      return any;
  }
}

function invent_new_names_sexp(param) {
  switch (param.TAG | 0) {
    case /* Cons */1 :
        var match = param._0;
        return List.concat({
                    hd: invent_new_names_sexp(match[1]),
                    tl: {
                      hd: invent_new_names_sexp(match[2]),
                      tl: /* [] */0
                    }
                  });
    case /* Atom */4 :
        var name = param._0[1];
        return {
                hd: [
                  name,
                  Gensym.gensym(name)
                ],
                tl: /* [] */0
              };
    default:
      return /* [] */0;
  }
}

function make_binding_unique(param) {
  var match = param._0;
  var name = match[1];
  return [
          name,
          /* Binding */{
            _0: [
              match[0],
              Gensym.gensym(name),
              match[2]
            ]
          }
        ];
}

function rename_in_bodyform(namemap, e) {
  switch (e.TAG | 0) {
    case /* Let */0 :
        var match = e._0;
        var new_bindings = List.map((function (param) {
                var match = param._0;
                return /* Binding */{
                        _0: [
                          match[0],
                          match[1],
                          rename_in_bodyform(namemap, match[2])
                        ]
                      };
              }), match[1]);
        var new_body = rename_in_bodyform(namemap, match[2]);
        return {
                TAG: /* Let */0,
                _0: [
                  match[0],
                  new_bindings,
                  new_body
                ]
              };
    case /* Quoted */1 :
        var e$1 = e._0;
        if (e$1.TAG !== /* Atom */4) {
          return {
                  TAG: /* Quoted */1,
                  _0: e$1
                };
        }
        var match$1 = e$1._0;
        var n = match$1[1];
        var l = match$1[0];
        try {
          return {
                  TAG: /* Quoted */1,
                  _0: {
                    TAG: /* Atom */4,
                    _0: [
                      l,
                      Curry._2(Comptypes.StringMap.find, n, namemap)
                    ]
                  }
                };
        }
        catch (exn){
          return {
                  TAG: /* Quoted */1,
                  _0: {
                    TAG: /* Atom */4,
                    _0: [
                      l,
                      n
                    ]
                  }
                };
        }
    case /* Value */2 :
        var v = e._0;
        if (v.TAG !== /* Atom */4) {
          return {
                  TAG: /* Value */2,
                  _0: v
                };
        }
        var match$2 = v._0;
        var n$1 = match$2[1];
        var l$1 = match$2[0];
        try {
          return {
                  TAG: /* Value */2,
                  _0: {
                    TAG: /* Atom */4,
                    _0: [
                      l$1,
                      Curry._2(Comptypes.StringMap.find, n$1, namemap)
                    ]
                  }
                };
        }
        catch (exn$1){
          return {
                  TAG: /* Value */2,
                  _0: {
                    TAG: /* Atom */4,
                    _0: [
                      l$1,
                      n$1
                    ]
                  }
                };
        }
    case /* Call */3 :
        var match$3 = e._0;
        var new_vs = List.map((function (param) {
                return rename_in_bodyform(namemap, param);
              }), match$3[1]);
        return {
                TAG: /* Call */3,
                _0: [
                  match$3[0],
                  new_vs
                ]
              };
    
  }
}

function rename_in_helperform(namemap, param) {
  switch (param.TAG | 0) {
    case /* Defconstant */0 :
        var match = param._0;
        return {
                TAG: /* Defconstant */0,
                _0: [
                  match[0],
                  match[1],
                  rename_in_bodyform(namemap, match[2])
                ]
              };
    case /* Defmacro */1 :
        var match$1 = param._0;
        return {
                TAG: /* Defmacro */1,
                _0: [
                  match$1[0],
                  match$1[1],
                  match$1[2],
                  rename_in_compileform(namemap, match$1[3])
                ]
              };
    case /* Defun */2 :
        var match$2 = param._0;
        return {
                TAG: /* Defun */2,
                _0: [
                  match$2[0],
                  match$2[1],
                  match$2[2],
                  match$2[3],
                  rename_in_bodyform(namemap, match$2[4])
                ]
              };
    
  }
}

function rename_args_bodyform(e) {
  switch (e.TAG | 0) {
    case /* Let */0 :
        var match = e._0;
        var renames = List.map(make_binding_unique, match[1]);
        var new_renamed_bindings = List.map((function (prim) {
                return prim[1];
              }), renames);
        var local_namemap = Comptypes.StringMapBuilder.go(List.map((function (param) {
                    return [
                            param[0],
                            param[1]._0[1]
                          ];
                  }), renames));
        var new_bindings = List.map((function (param) {
                var match = param._0;
                return /* Binding */{
                        _0: [
                          match[0],
                          match[1],
                          rename_args_bodyform(match[2])
                        ]
                      };
              }), new_renamed_bindings);
        var locally_renamed_body = rename_in_bodyform(local_namemap, match[2]);
        return {
                TAG: /* Let */0,
                _0: [
                  match[0],
                  new_bindings,
                  locally_renamed_body
                ]
              };
    case /* Quoted */1 :
        return {
                TAG: /* Quoted */1,
                _0: e._0
              };
    case /* Value */2 :
        return {
                TAG: /* Value */2,
                _0: e._0
              };
    case /* Call */3 :
        var match$1 = e._0;
        var new_vs = List.map(rename_args_bodyform, match$1[1]);
        return {
                TAG: /* Call */3,
                _0: [
                  match$1[0],
                  new_vs
                ]
              };
    
  }
}

function rename_args_helperform(param) {
  switch (param.TAG | 0) {
    case /* Defconstant */0 :
        var match = param._0;
        return {
                TAG: /* Defconstant */0,
                _0: [
                  match[0],
                  match[1],
                  rename_args_bodyform(match[2])
                ]
              };
    case /* Defmacro */1 :
        var match$1 = param._0;
        var arg = match$1[2];
        var new_names = invent_new_names_sexp(arg);
        var local_namemap = Comptypes.StringMapBuilder.go(new_names);
        var local_renamed_arg = rename_in_cons(local_namemap, arg);
        var local_renamed_body = rename_args_compileform(match$1[3]);
        return {
                TAG: /* Defmacro */1,
                _0: [
                  match$1[0],
                  match$1[1],
                  local_renamed_arg,
                  rename_in_compileform(local_namemap, local_renamed_body)
                ]
              };
    case /* Defun */2 :
        var match$2 = param._0;
        var arg$1 = match$2[3];
        var new_names$1 = invent_new_names_sexp(arg$1);
        var local_namemap$1 = Comptypes.StringMapBuilder.go(new_names$1);
        var local_renamed_arg$1 = rename_in_cons(local_namemap$1, arg$1);
        var local_renamed_body$1 = rename_args_bodyform(match$2[4]);
        return {
                TAG: /* Defun */2,
                _0: [
                  match$2[0],
                  match$2[1],
                  match$2[2],
                  local_renamed_arg$1,
                  rename_in_bodyform(local_namemap$1, local_renamed_body$1)
                ]
              };
    
  }
}

function rename_in_compileform(namemap, param) {
  var match = param._0;
  return /* Mod */{
          _0: [
            match[0],
            match[1],
            List.map((function (param) {
                    return rename_in_helperform(namemap, param);
                  }), match[2]),
            rename_in_bodyform(namemap, match[3])
          ]
        };
}

function rename_args_compileform(param) {
  var match = param._0;
  var arg = match[1];
  var new_names = invent_new_names_sexp(arg);
  var local_namemap = Comptypes.StringMapBuilder.go(new_names);
  var local_renamed_arg = rename_in_cons(local_namemap, arg);
  var local_renamed_helpers = List.map(rename_args_helperform, match[2]);
  var local_renamed_body = rename_args_bodyform(match[3]);
  return /* Mod */{
          _0: [
            match[0],
            local_renamed_arg,
            List.map((function (param) {
                    return rename_in_helperform(local_namemap, param);
                  }), local_renamed_helpers),
            rename_in_bodyform(local_namemap, local_renamed_body)
          ]
        };
}

function rename_children_compileform(param) {
  var match = param._0;
  var local_renamed_helpers = List.map(rename_args_helperform, match[2]);
  var local_renamed_body = rename_args_bodyform(match[3]);
  return /* Mod */{
          _0: [
            match[0],
            match[1],
            local_renamed_helpers,
            local_renamed_body
          ]
        };
}

exports.rename_in_qq = rename_in_qq;
exports.rename_in_cons = rename_in_cons;
exports.invent_new_names_sexp = invent_new_names_sexp;
exports.make_binding_unique = make_binding_unique;
exports.rename_in_bodyform = rename_in_bodyform;
exports.rename_args_bodyform = rename_args_bodyform;
exports.rename_in_helperform = rename_in_helperform;
exports.rename_args_helperform = rename_args_helperform;
exports.rename_in_compileform = rename_in_compileform;
exports.rename_children_compileform = rename_children_compileform;
exports.rename_args_compileform = rename_args_compileform;
/* Comptypes Not a pure module */

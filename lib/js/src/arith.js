// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Sexp = require("./sexp.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Option = require("./option.js");
var BigInteger = require("@pckilgore/bs-biginteger/lib/js/src/BigInteger.js");
var BigInteger$1 = require("big-integer");

function do_arith(l, op, a, b) {
  var converted_args = $$Option.bind((function (a) {
          return $$Option.map((function (b) {
                        return [
                                a,
                                b
                              ];
                      }), Sexp.sexp_to_bigint(b));
        }), Sexp.sexp_to_bigint(a));
  if (converted_args === undefined) {
    return {
            TAG: /* RunError */0,
            _0: [
              l,
              "bad argument conversion for " + (Sexp.to_string(a) + (" and " + Sexp.to_string(b)))
            ]
          };
  }
  var result = Curry._2(op, converted_args[0], converted_args[1]);
  return {
          TAG: /* RunOk */2,
          _0: {
            TAG: /* Integer */2,
            _0: [
              l,
              BigInteger.toString(result, 10, undefined)
            ]
          }
        };
}

function add(a, b) {
  return a.add(b);
}

function subtract(a, b) {
  return a.subtract(b);
}

function multiply(a, b) {
  return a.multiply(b);
}

function divide(a, b) {
  return a.divide(b);
}

function do_greater(a, b) {
  if (a.greater(b)) {
    return BigInteger$1(1);
  } else {
    return BigInteger$1(0);
  }
}

function do_divmod(l, _a, _b) {
  return {
          TAG: /* RunError */0,
          _0: [
            l,
            "not implemented"
          ]
        };
}

function shl(n, v) {
  return v.shiftLeft(n.toJSNumber());
}

function shr(n, v) {
  return v.shiftRight(n.toJSNumber());
}

function logand(_a, _b) {
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function logior(_a, _b) {
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function logxor(_a, _b) {
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

exports.do_arith = do_arith;
exports.add = add;
exports.subtract = subtract;
exports.multiply = multiply;
exports.divide = divide;
exports.do_greater = do_greater;
exports.do_divmod = do_divmod;
exports.shl = shl;
exports.shr = shr;
exports.logand = logand;
exports.logior = logior;
exports.logxor = logxor;
/* Sexp Not a pure module */

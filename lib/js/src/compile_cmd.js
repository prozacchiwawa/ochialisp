// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Macros = require("./macros.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Srcloc = require("./srcloc.js");
var $$String = require("bs-platform/lib/js/string.js");
var Codegen = require("./codegen.js");
var Process = require("process");
var Compiler = require("./compiler.js");
var Frontend = require("./frontend.js");
var Comptypes = require("./comptypes.js");

function process_arg(ap, arg) {
  if (ap.nextInclude) {
    return {
            includeDirs: {
              hd: arg,
              tl: ap.includeDirs
            },
            nextInclude: false,
            inputFiles: ap.inputFiles,
            noAssemble: ap.noAssemble,
            output: ap.output,
            nextOutput: ap.nextOutput
          };
  }
  if (ap.nextOutput) {
    return {
            includeDirs: ap.includeDirs,
            nextInclude: ap.nextInclude,
            inputFiles: ap.inputFiles,
            noAssemble: ap.noAssemble,
            output: arg,
            nextOutput: false
          };
  }
  if (arg === "-S") {
    return {
            includeDirs: ap.includeDirs,
            nextInclude: ap.nextInclude,
            inputFiles: ap.inputFiles,
            noAssemble: true,
            output: ap.output,
            nextOutput: ap.nextOutput
          };
  }
  if (arg === "-o") {
    return {
            includeDirs: ap.includeDirs,
            nextInclude: ap.nextInclude,
            inputFiles: ap.inputFiles,
            noAssemble: ap.noAssemble,
            output: ap.output,
            nextOutput: true
          };
  }
  if (arg.length === 2 && arg === "-I") {
    return {
            includeDirs: ap.includeDirs,
            nextInclude: true,
            inputFiles: ap.inputFiles,
            noAssemble: ap.noAssemble,
            output: ap.output,
            nextOutput: ap.nextOutput
          };
  }
  if (!(arg.length > 2 && $$String.sub(arg, 0, 2) === "-I")) {
    return {
            includeDirs: ap.includeDirs,
            nextInclude: ap.nextInclude,
            inputFiles: {
              hd: arg,
              tl: ap.inputFiles
            },
            noAssemble: ap.noAssemble,
            output: ap.output,
            nextOutput: ap.nextOutput
          };
  }
  var newInclude = $$String.sub(arg, 2, arg.length - 2 | 0);
  return {
          includeDirs: {
            hd: newInclude,
            tl: ap.includeDirs
          },
          nextInclude: ap.nextInclude,
          inputFiles: ap.inputFiles,
          noAssemble: ap.noAssemble,
          output: ap.output,
          nextOutput: ap.nextOutput
        };
}

function tryLocateFile(oldname, _includeDirs, name) {
  while(true) {
    var includeDirs = _includeDirs;
    if (!includeDirs) {
      return {
              TAG: /* CompileError */1,
              _0: Srcloc.start(oldname),
              _1: "Could not find file " + (name + " in include dirs")
            };
    }
    try {
      var find_path = Path.join(includeDirs.hd, name);
      return {
              TAG: /* CompileOk */0,
              _0: [
                find_path,
                Fs.readFileSync(find_path, "utf8")
              ]
            };
    }
    catch (exn){
      _includeDirs = includeDirs.tl;
      continue ;
    }
  };
}

function main(args) {
  var ap = List.fold_left(process_arg, {
        includeDirs: /* [] */0,
        nextInclude: false,
        inputFiles: /* [] */0,
        noAssemble: false,
        output: "",
        nextOutput: false
      }, args);
  return List.iter((function (infile) {
                var input = Fs.readFileSync(infile, "utf8");
                var opts_includeDirs = ap.includeDirs;
                var opts_readNewFile = function (opts, oldname, name) {
                  if (name === "*macros*") {
                    return {
                            TAG: /* CompileOk */0,
                            _0: [
                              name,
                              $$String.concat("\n", Macros.macros)
                            ]
                          };
                  } else {
                    return tryLocateFile(oldname, opts.includeDirs, name);
                  }
                };
                var opts_compileProgram = function (opts, program) {
                  return Comptypes.compBind((function (m) {
                                return Codegen.codegen(opts, m);
                              }), Frontend.frontend(opts, {
                                  hd: program,
                                  tl: /* [] */0
                                }));
                };
                var opts_assemble = !ap.noAssemble;
                var opts = {
                  includeDirs: opts_includeDirs,
                  filename: infile,
                  readNewFile: opts_readNewFile,
                  compiler: undefined,
                  compileProgram: opts_compileProgram,
                  inDefun: false,
                  assemble: opts_assemble,
                  stdenv: true,
                  startEnv: undefined
                };
                var result = Compiler.compile_file(opts, input);
                if (result.TAG !== /* CompileOk */0) {
                  return Curry._2(Printf.printf(/* Format */{
                                  _0: {
                                    TAG: /* String */2,
                                    _0: /* No_padding */0,
                                    _1: {
                                      TAG: /* String_literal */11,
                                      _0: ": ",
                                      _1: {
                                        TAG: /* String */2,
                                        _0: /* No_padding */0,
                                        _1: {
                                          TAG: /* Char_literal */12,
                                          _0: /* '\n' */10,
                                          _1: /* End_of_format */0
                                        }
                                      }
                                    }
                                  },
                                  _1: "%s: %s\n"
                                }), Srcloc.toString(result._0), result._1);
                }
                var output = result._0;
                if (ap.output === "") {
                  return Curry._2(Printf.printf(/* Format */{
                                  _0: {
                                    TAG: /* String */2,
                                    _0: /* No_padding */0,
                                    _1: {
                                      TAG: /* String_literal */11,
                                      _0: ": ",
                                      _1: {
                                        TAG: /* String */2,
                                        _0: /* No_padding */0,
                                        _1: {
                                          TAG: /* Char_literal */12,
                                          _0: /* '\n' */10,
                                          _1: /* End_of_format */0
                                        }
                                      }
                                    }
                                  },
                                  _1: "%s: %s\n"
                                }), infile, output);
                } else {
                  Fs.writeFileSync(ap.output, output, "utf8");
                  return ;
                }
              }), List.rev(ap.inputFiles));
}

var argv = Process.argv;

var real_args = $$Array.to_list($$Array.sub(argv, 2, argv.length - 2 | 0));

var want_help = real_args === /* [] */0 || List.filter(function (param) {
        return "-h" === param;
      })(real_args) !== /* [] */0 || List.filter(function (param) {
        return "--help" === param;
      })(real_args) !== /* [] */0;

if (want_help) {
  Printf.printf(/* Format */{
        _0: {
          TAG: /* String_literal */11,
          _0: "Usage: chiacompile [-Iinclude_dir ...] [files]\n",
          _1: /* End_of_format */0
        },
        _1: "Usage: chiacompile [-Iinclude_dir ...] [files]\n"
      });
} else {
  main(real_args);
}

exports.process_arg = process_arg;
exports.tryLocateFile = tryLocateFile;
exports.main = main;
/* argv Not a pure module */
